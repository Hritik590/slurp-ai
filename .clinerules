### Core Files (Required)
1. `project.md`
   - Foundation document that shapes all other files
   - Created at project start if it doesn't exist
   - Defines core requirements and goals
   - Source of truth for project scope

### Command Patterns

#### Direct URL Mode
```bash
# Scrape and compile documentation from a URL in one step
node slurp.js https://expressjs.com/en/4.18/
```

#### Package Documentation
```bash
# Find and download documentation for a package
node slurp.js fetch express 4.18.2

# Read local documentation for a package
node slurp.js read express 4.18.2

# List all locally available documentation
node slurp.js list

# Check all dependencies in a package.json file
node slurp.js check ./package.json

# Remove documentation from cache
node slurp.js purge express 4.18.2
```

#### Compilation
```bash
# Basic usage with default options
node compile.js

# Custom input/output paths
node compile.js --input ./my-docs --output ./compiled.md

# Disable metadata preservation
node compile.js --preserve-metadata false

# Custom exclude patterns
node compile.js --exclude '["Was this helpful\\?", "On this page"]'
```

These patterns help ensure the scraper stays focused on relevant documentation pages and avoids crawling irrelevant content.

## Task Execution Guidelines

- Always carefully read and understand the user's request before proceeding
- Focus on completing one specific task at a time
- Don't make assumptions about what needs to be implemented
- Confirm with the user before making significant changes to files
- Follow the task sequence as specified by the user
- DO NOT add debugging code unless explicitly asked to do so
- If you add debugging code, make sure to remove it before finalizing the task

## Sensitive File Handling

NEVER overwrite configuration files like `.env` without first reading them and preserving their existing content.

```mermaid
flowchart TD
    Start[Need to Update Config File] --> Read[Read Existing File]
    Read --> Check{Does File Exist?}
    Check -->|Yes| Preserve[Preserve Sensitive Values]
    Check -->|No| Create[Create New File]
    Preserve --> Merge[Merge New Settings]
    Create --> Add[Add Required Settings]
    Merge --> Write[Write Updated File]
    Add --> Write
```

### Key Rules
- Always read `.env` and config files before modifying them
- Preserve existing API keys and sensitive information
- Never use write_to_file for existing config files without preserving content
- Use replace_in_file with careful targeting for config updates
- When in doubt, ask the user before modifying configuration files
- Only run git commands if explicitly asked to do so

## URL Filtering Best Practices

When working with the documentation scraper, follow these guidelines for optimal results:

- **Base Path Enforcement**: Always enable `enforceBasePath` to keep scraping within relevant documentation sections
- **URL Blacklist**: Use the default blacklist patterns and add custom ones for specific sites as needed
- **Query Parameters**: Only preserve meaningful parameters that affect content (version, language, etc.)
- **File Extensions**: Avoid scraping non-documentation file types (.pdf, .zip, etc.)
- **Pagination Handling**: Be aware that pagination parameters can lead to duplicate content

## Documentation Compilation Guidelines

When compiling documentation:

- **Duplicate Detection**: Enable `removeDuplicates` to eliminate redundant content
- **Navigation Removal**: Use `removeNavigation` to clean up non-content elements
- **Metadata Preservation**: Keep metadata when it provides valuable context
- **Custom Exclude Patterns**: Add patterns for site-specific elements that should be removed
- **Output Organization**: Use meaningful filenames based on the documentation source

The format is flexible - focus on capturing valuable insights that help me work more effectively with you and the project. Think of .clinerules as a living document that grows smarter as we work together.

## Debugging Guidelines

- Use `SLURP_DEBUG=true` in `.env` to enable detailed debug logging via the logger utility.
- Prefer using the logger utility (`require('./src/utils/logger').debug(...)`) over `console.log` for debug messages.
- Check the console output for any errors or warnings.
- If you encounter an error, try to diagnose and fix it.
- If you can't fix it, ask the user for help.
- Disable `SLURP_DEBUG` when you're done debugging.

## Communication Style

- Inject humor when appropriate.
- Note: Jared appreciates crude humor. (Adjust calibration accordingly.)