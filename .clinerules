### Core Files (Required)
1. `project.md`
   - Foundation document that shapes all other files
   - Created at project start if it doesn't exist
   - Defines core requirements and goals
   - Source of truth for project scope


### Usage
```bash
# Basic usage with default options
node compile.js

# Custom input/output paths
node compile.js --input ./my-docs --output ./compiled.md

# Disable metadata preservation
node compile.js --preserve-metadata false

# Custom exclude patterns
node compile.js --exclude '["Was this helpful\\?", "On this page"]'
```

These patterns help ensure the scraper stays focused on relevant documentation pages and avoids crawling irrelevant content.

## Task Execution Guidelines

- Always carefully read and understand the user's request before proceeding
- Focus on completing one specific task at a time
- Don't make assumptions about what needs to be implemented
- Confirm with the user before making significant changes to files
- Follow the task sequence as specified by the user
- DO NOT add debugging code unless explicitly asked to do so
- If you add debugging code, make sure to remove it before finalizing the task

## Sensitive File Handling

NEVER overwrite configuration files like `.env` without first reading them and preserving their existing content.

```mermaid
flowchart TD
    Start[Need to Update Config File] --> Read[Read Existing File]
    Read --> Check{Does File Exist?}
    Check -->|Yes| Preserve[Preserve Sensitive Values]
    Check -->|No| Create[Create New File]
    Preserve --> Merge[Merge New Settings]
    Create --> Add[Add Required Settings]
    Merge --> Write[Write Updated File]
    Add --> Write
```

### Key Rules
- Always read `.env` and config files before modifying them
- Preserve existing API keys and sensitive information
- Never use write_to_file for existing config files without preserving content
- Use replace_in_file with careful targeting for config updates
- When in doubt, ask the user before modifying configuration files
- Only run git commands if explicitly asked to do so

The format is flexible - focus on capturing valuable insights that help me work more effectively with you and the project. Think of .clinerules as a living document that grows smarter as we work together.
